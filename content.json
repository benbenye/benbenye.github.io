[{"title":"解决 fedora 24 wayland 环境下webstorm不能使用搜狗输入法","date":"2017-03-13T11:28:00.000Z","path":"2017/03/13/解决-fedora-24-wayland-环境下webstorm不能使用搜狗输入法/","text":"更新完系统发现可以使用 Wayland 系统, 于是尝了一下鲜。平时使用的应用基本没有什么兼容问题，唯一的问题是webstorm里无法输入中文了。 在网上找到的说法是 wayland 没有导入相关的环境变量，导致 Java 的 UI 应用无法正常使用 fcitx。临时的解决办法是在 webstorm 的启动脚本里手动导入相应的环境变量：12# /usr/local/WebStorm-162.1121.31/bin/webstorm.sh export XMODIFIERS=@im=fcitx 参考：https://fcitx-im.org/wiki/Configure_(Other))https://github.com/fcitx/fcitx/issues/230https://wiki.archlinux.org/index.php/Environment_variableshttps://fedoraproject.org/wiki/%E4%B8%BB%E8%A6%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6","tags":[{"name":"linux","slug":"linux","permalink":"http:/benbenye.github.io/tags/linux/"},{"name":"problem","slug":"problem","permalink":"http:/benbenye.github.io/tags/problem/"}]},{"title":"TODO-5：爬取图片整理","date":"2017-02-16T11:03:31.051Z","path":"2017/02/16/TODO-5：爬取图片整理/","text":"TODO-4：nodejs 实现一部漫画爬取这篇文章写完之后，被[猪头]看到，居然劈头盖脸一顿说： 为什么这么烂的代码也敢粘出来？为什么主要逻辑已经实现了，还不把东西抽离出来，做一个成品出来？为什么不工具化？…… 哪那么多为什么！ 人家只是想说一下写爬虫的时候需要的几个基本工具的用法不行吗？我代码这么烂，你就不会跟我说，帮我优化一下吗？我辛辛苦苦码出来的东西，不知道安慰，就知道说不是！ 所以今天为了家庭和睦，于是出了抓取漫画工具1.0 ；） github 地址 V1.0比较粗糙，主要支持：1：默认爬取整部漫画（目前只支持《镇魂街》）2：查询上次爬取进度3：查询漫画更新进度 #####默认爬取整部漫画（目前只支持《镇魂街》）参数：anythinglog文件名：name.json12345678910111213141516171819202122bash-3.2$ node --harmony app anything 镇魂街.json------------总共 180 章节--------------打log 记录章节列表已成功抓取write 镇魂街.json ok打log 记录章节对应的图片链接已成功抓取write 镇魂街.json ok打log 记录章节对应的图片已成功抓取write 镇魂街.json okwrite img: imgfile2/174 一百六十五 天佑/1.jpgwaiting打log 记录章节对应的图片已成功抓取write 镇魂街.json okwrite img: imgfile2/174 一百六十五 天佑/2.jpgwaiting打log 记录章节对应的图片已成功抓取write 镇魂街.json okwrite img: imgfile2/174 一百六十五 天佑/3.jpgwaiting打log 记录章节对应的图片已成功抓取write 镇魂街.json okwrite img: imgfile2/174 一百六十五 天佑/4.jpgwaiting 为了不让被爬网站‘起疑’，除了做了一些request header的处理之外，在抓取频率上做了一点手脚，做了一个随机秒数的延时，主要为了更近似的模拟人的行为123return new Promise((res, rej) =&gt; &#123; setTimeout(res, 2000 + Math.random())&#125;); #####查询上次爬取进度参数：getLastStatus|glslog文件名：镇魂街.json12bash-3.2$ node --harmony app gls 镇魂街.json[ 0, 4 ] #####查询漫画更新进度参数： checkUpdatelog文件名：镇魂街.json 1234bash-3.2$ node --harmony app checkUpdate 镇魂街.json上次抓取位置: [ 0, 5 ] 本地进度: 173 一百六十四 铁牢 抓取进度: 174 一百六十五 天佑 以上是我目前粗略地实现的三个小功能，不过目前因为解析html的代码不好通过参数赋值，还没想到能够定制爬虫的好办法","tags":[]},{"title":"TODO-4：nodejs 实现一部漫画爬取","date":"2017-01-03T07:23:00.000Z","path":"2017/01/03/TODO-4：nodejs 实现一部漫画爬取/","text":"很早之前一直很喜欢听一些有声评书，当时为了找这些音频也是煞费苦心。但是找的过程中也发现，我每次下载音频的时候都是在重复同样的操作，所以也想过是不是可以用程序实现。那时候并没有很强的意念去实现这个工具，所以只是停留在了想的层面。 前不久无意发现一部感觉不错的动漫《镇魂街》，看了动画片之后觉得不过瘾，发现官方的漫画版还挺有看头的，于是又从头开始后撸漫画，但是发现一页一页的翻翻找找好累，所以又想着把这些图片一次性down下来该多爽。 抓取网页的几个必要工具先罗列一下： superagent github 地址 代替客户端发起请求； cheerio github地址 解析html fs node 的文件系统模块 首先找个稳定点的网站用来抓取，不然刚研究好怎么解析这个网站下的页面，结果页面不稳定，白费力气。解析的思路一定是顺序的，首先要把一部漫画的章节找出来，然后根据每个章节下载里面的图片。 下面说说我在抓取的过程遇到的几个小问题：1：编码问题；默认情况下superagent是utf-8的编码，但是如果遇到网站的编码不是utf-8就会出现抓取下来的页面都是乱码，自然就不好解析了。所以出现这种情况的时候，可以在发起请求的时候添加编码设置，这就涉及到了第四个必要工具：superagent-charset，github地址，防止乱码用的。2：请求头的问题；一般这种网站都会有防盗链的措施，所以如果随意请求，很快就会被反套路，所以最安全的方案就是用浏览器打开需要抓取的页面，找到相应的网络请求头，全copy下来，不过要特别注意一下有的Referer这个字段是固定的连接，但是有的是根据章节，每个章节不同。3：请求‘顺序’还是‘并发’最初使用并发的形式抓取，但是会出现抓取的图片不全的现象。这种情况还不是很清楚什么原因导致的。不过转为顺序并且把每次请求都间隔了一定时间，尽量的模仿实际人工请求，没有出现抓取不全的现象。 下面是主要代码逻辑： 用来统一设置请求头的方法： 123456789101112131415function makeReuest(option)&#123; return request.get(option.url).charset('gbk') .set('Accept','text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8') // .set('Accept-Encoding','gzip, deflate, sdch') .set('Accept-Language','zh-CN,zh;q=0.8,en;q=0.6') .set('Cache-Control','no-cache') .set('Connection','keep-alive') .set('Cookie',option.cookie) .set('Host',option.host) .set('Pragma','no-cache') .set('Referer',option.referer) // .set('Upgrade-Insecure-Requests','1') .set('User-Agent','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36') .catch(option.cb); &#125; 所有callback转为promise形式12345678910111213module.exports = function (func, option = &#123;&#125;) &#123; return (...arg) =&gt; new Promise((resolve, reject) =&gt; &#123; return func.apply(option.context, [...arg, (err, ...data) =&gt; &#123; if (err) &#123; return reject(err); &#125; if (option.multiArg) &#123; return resolve(data) &#125; return resolve(data[0]); &#125;]); &#125;)&#125; 写文件逻辑： 123456789101112131415161718192021const writeFileAsync = promisify(fs.writeFile);const mkdirAsync = promisify(fs.mkdir);writeFileAsync(imgPath, _picRes.body) .then(function () &#123; console.log('write OK:', imgPath) &#125;) .catch(function () &#123; console.log('write err:', imgPath) mkdirAsync(path) .then(function () &#123; return writeFileAsync(imgPath, _picRes.body) &#125;) .then(function () &#123; console.log('write file retry finished:', imgPath) &#125;) .catch(function (err) &#123; console.log('retry err', err) throw err; &#125;); &#125;);","tags":[]},{"title":"使用 npm 私有仓库安装依赖遇到的坑","date":"2016-11-17T09:14:00.000Z","path":"2016/11/17/使用 npm 私有仓库安装依赖遇到的坑/","text":"最近项目部署的时候时常遇到访问 npm 官方仓库网络抽疯的现象，决定尝试一下公司内部新搭建的私有仓库（使用的 cnpm）。切换个仓库这么简单的事没想到遇到两个大坑，记录一下： tarball url 指向不正确 问题：用npm i --registry=https://rnpm.xxxxx.com xxx 命令安装时，结果却到 r.cnpmjs.org 这个域下面下载tar包。原因：仓库的registryHost配置错误。 项目部署的时候大部分依赖包还是去官方仓库下载 问题：使用npm i --registry=https://rnpm.xxxxx.com命令安装依赖的时候发现registry参数似乎不起作用，绝大多数包居然又到官方的仓库去拉取数据（包括 metadata 和 tarball），但奇怪的是居然还有两三个包是正常的到 rnpm.xxxxx.com 域去下载数据了。 原因：因为用 npm shrinkwrap 命令锁定了依赖，而 npm-shrinkwrap.json 里有个 resolved字段，这个字段指定了tarball下载的地址，npm使用这个地址下载了真正的依赖包。解决办法：目前还没有好的解决办法，暂时先替换掉resolved字段里的 url，npm@5之后的版本应该会提供一个优雅的解决方案。s替换url的方法： 1sed -i -- 's/https:\\/\\/registry\\.npmjs\\.org/https:\\/\\/rnpm\\.xxxxx\\.com/g' npm-shrinkwrap.json 其他的方案还有: shonkwrap rewrite-shrinkwrap-urls 参考：https://github.com/npm/npm/issues/6445 https://github.com/npm/npm/issues/6324 http://blog.npmjs.org/post/145724408060/dealing-with-problematic-dependencies-in-a https://support.sonatype.com/hc/en-us/articles/213465048-Why-does-npm-client-need-access-to-URLs-other-than-my-private-registry- http://stackoverflow.com/questions/33682804/why-does-npm-install-use-the-shrinkwraps-resolved-property","tags":[]},{"title":"TODO-3：css relative and absolute","date":"2016-11-14T03:42:00.000Z","path":"2016/11/14/TODO-3：css relative and absolute/","text":"css中很多属性都是很近似的，平时在项目中使用并不会太在意两者之间的区别，之前在css定位上吃过亏，这次细致的解析一下。 1css position: fixed | static | absolute | relative | center | page | sticky static 和 fixed 的概念很简单，这里不做详细解释。 center page sticky 属于css3新增属性。relative 相对定位，它的地位计算基于自身在文档中的位置，同时会占用文档流，使用top right bottom left 时不会影响到页面中其他元素的位置（除非在这个元素中含有带有定位的元素）。 absolute 绝对定位，它的定位计算基于父元素，父元素没有则向上追溯，直到body 应用了absolute 的元素会脱离文档流，不在页面中占位，使用top right bottom left 时也不会影响到页面中其他元素的位置（除非在这个元素中含有带有定位的元素）。 下面是我写的关于absolute relative 的demo","tags":[]},{"title":"linux 下使用n配置使用淘宝镜像","date":"2016-10-29T04:16:00.000Z","path":"2016/10/29/linux 下使用n配置使用淘宝镜像/","text":"n 是 nodejs 版本管理器，鉴于国内网络环境，作如下配置用起来才会便捷. 12345678# ~/.bashrc 或 ~/.zshrc# 使用淘宝 nodejs 镜像，注意末尾的'/'不能省略export NODE_MIRROR=https://npm.taobao.org/dist/# 建议 linux 用户配置 nodejs 安装目录，切换版本不用 root 权限export N_PREFIX=$HOME/.nexport PATH=$HOME/.n/bin:$PATH","tags":[]},{"title":"TODO-2：浏览器唤醒APP","date":"2016-09-13T08:09:00.000Z","path":"2016/09/13/TODO-2：浏览器唤醒APP/","text":"代码块收藏 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259(function() &#123; var UA = navigator.userAgent; var isIPad = (UA.match(/(iPad).*OS\\s([\\d_]+)/)) ? true: false; var isIPhone = (!isIPad &amp;&amp; UA.match(/(iPhone\\sOS)\\s([\\d_]+)/)) ? true: false; var isSafari = (isIPhone || isIPad) &amp;&amp; UA.match(/Safari/); var SafariVersion = 0; isSafari &amp;&amp; (SafariVersion = UA.match(/Version\\/([\\d\\.]+)/)); SafariVersion = parseFloat(SafariVersion[1], 10); var isWeixin = navigator.userAgent.indexOf(\"MicroMessenger\") &gt;= 0; var j = false; var s = \"plugIn_downloadAppPlugIn_loadIframe\"; var t = false; var D = &#123;&#125;; var query = null; var J = &#123;&#125;; var isQuery = window.Zepto || window.jQuery ? true: false; var timerAry = []; function bindEvent(P, O, N) &#123; if (isQuery) &#123; query(\"#\" + P).bind(O, N) &#125; else &#123; query(\"#\" + P).addEventListener(O, N, !1) &#125; &#125; if (isQuery) &#123; query = window.$; J = window.$ &#125; else &#123; query = function(N) &#123; if (typeof N == \"object\") &#123; return N &#125; return document.querySelector(N) &#125;; if (!window.$) &#123; window.$ = J = query &#125; else &#123; J = window.$ &#125; &#125; window.onblur = function() &#123; for (var N = 0; N &lt; timerAry.length; N++) &#123; clearTimeout(timerAry[N]) &#125; &#125;; function getCookieByName(P) &#123; var O = document.cookie.indexOf(P + \"=\"); if (O == -1) &#123; return \"\" &#125; O = O + P.length + 1; var N = document.cookie.indexOf(\";\", O); if (N == -1) &#123; N = document.cookie.length &#125; return document.cookie.substring(O, N) &#125; function setCookie(P, R, N, S, Q) &#123; var T = P + \"=\" + escape(R); if (N != \"\") &#123; var O = new Date(); O.setTime(O.getTime() + N * 24 * 3600 * 1000); T += \";expires=\" + O.toGMTString() &#125; if (S != \"\") &#123; T += \";path=\" + S &#125; if (Q != \"\") &#123; T += \";domain=\" + Q &#125; document.cookie = T &#125; function merageConfig(N) &#123; var P = &#123; downAppURl: \"http://static.chunboimg.com/app/\"+$('#andriod_app_download_version').val() || \"ChunBoMall_2.5.2.apk\", downAppIos: \"https://itunes.apple.com/us/app/chun-bo/id967139095?mt=8\", downWeixin: \"http://www.chunbo.com/app/check_app_source\", downIpad: \"https://itunes.apple.com/us/app/chun-bo/id967139095?mt=8\", inteneUrl: \"chunbo://chunbo/startApp\", inteneUrlParams: null, inteneUrlPage: 3, openAppBtnId: \"\", closePanelBtnId: \"\", closePanelId: \"\", closeCallblack: null, closeCallblackSource: null, cookieFlag: null, noRecord: false, sourceType: \"JSHOP_SOURCE_TYPE\", sourceValue: \"JSHOP_SOURCE_VALUE\", openAppEventId: \"MDownLoadFloat_OpenNow\", closePanelEventId: \"MDownLoadFloat_Close\" &#125;; if (N) &#123; for (var O in N) &#123; if (O &amp;&amp; N[O]) &#123; P[O] = N[O] &#125; &#125; &#125; return P &#125; function getSchemaUrlWithParams(P) &#123; var Y = []; var S = P.inteneUrlParams; var ParamsStr = \"\"; if (S &amp;&amp; !S.sourceType &amp;&amp; !S.sourceValue) &#123; S.sourceType = P.sourceType; S.sourceValue = P.sourceValue &#125; if (S) &#123; for (var X in S) &#123; if (X &amp;&amp; S[X]) &#123; Y.push('\"' + X + '\":\"' + S[X] + '\"') &#125; &#125; &#125;// 不调用默认参数,只有传参里面有值才添加到params if (Y.length) &#123; var O = \"&#123;\" + Y.join(\",\") + \"&#125;\"; ParamsStr = \"&amp;params=\" + O &#125; return (P.inteneUrl + \"?page=\" + P.inteneUrlPage + ParamsStr) &#125; function tryOpenApp(P, N) &#123; var T = getSchemaUrlWithParams(P); var Q = null; if (isWeixin) &#123; var O = null; if (j) &#123; O = T &#125; else &#123; O = P.downWeixin &#125; location.href = O; return &#125; if (isIPad) &#123; Q = P.downIpad &#125; else &#123; if (isIPhone) &#123; Q = P.downAppIos &#125; else &#123; Q = P.downAppURl &#125; &#125; if (isSafari &amp;&amp; SafariVersion &gt;= 9) &#123; setTimeout(function() &#123; var U = document.createElement(\"a\"); U.setAttribute(\"href\", T), U.style.display = \"none\", document.body.appendChild(U); var V = document.createEvent(\"HTMLEvents\"); V.initEvent(\"click\", !1, !1), U.dispatchEvent(V) &#125;, 0) &#125; else &#123; document.querySelector(\"#\" + s).src = T &#125; var R = Date.now(); setTimeout(function() &#123; if (N) &#123; var U = setTimeout(function() &#123; openFailTryOpen(R, Q) &#125;, 1500); timerAry.push(U) &#125; &#125;, 100) &#125; function openFailTryOpen(P, O) &#123; var N = Date.now(); if (P &amp;&amp; (N - P) &lt; (1500 + 200)) &#123; window.location.href = O &#125; &#125; function bindOpenBtnClick(N) &#123; if (N.openAppBtnId) &#123; D[N.openAppBtnId] = N;// I(N.openAppBtnId, N.openAppEventId); bindEvent(N.openAppBtnId, \"click\", function() &#123; var R = this.getAttribute(\"id\"); var O = D[R]; if (!t) &#123; var P = document.createElement(\"iframe\"); P.id = s; document.body.appendChild(P); document.getElementById(s).style.display = \"none\"; document.getElementById(s).style.width = \"0px\"; document.getElementById(s).style.height = \"0px\"; t = true &#125; var Q = O.cookieFlag ? \"downloadAppPlugIn_downCloseDate_\" + O.cookieFlag: \"downloadAppPlugIn_downCloseDate\"; setCookie(Q, Date.now() + \"_2592000000\", 1, \"/\", \".chunbo.com\"); tryOpenApp(O, true) &#125;) &#125; &#125; function bindCloseBtnClick (O) &#123; if (O.closePanelBtnId &amp;&amp; O.closePanelId) &#123; D[O.closePanelBtnId] = O;// I(O.closePanelBtnId, O.closePanelEventId); var S = O.cookieFlag ? \"downloadAppPlugIn_downCloseDate_\" + O.cookieFlag: \"downloadAppPlugIn_downCloseDate\"; var Q = getCookieByName(S); var R = null; if (Q) &#123; R = Q.split(\"_\"); if (R.length == 2) &#123; R[0] = parseInt(R[0], 10); R[1] = parseInt(R[1], 10) &#125; else &#123; R = null &#125; &#125; var N = Date.now(); if (!O.noRecord &amp;&amp; R &amp;&amp; R.length == 2 &amp;&amp; (N - R[0]) &lt; R[1]) &#123; document.querySelector(\"#\" + O.closePanelId).style.display = \"none\"; if (O.closeCallblack) &#123; var P = O.closeCallblackSource ? O.closeCallblackSource: null; O.closeCallblack.call(P) &#125; return &#125; else &#123; document.querySelector(\"#\" + O.closePanelId).style.display = \"block\" &#125; bindEvent(O.closePanelBtnId, \"click\", function() &#123; var W = this.getAttribute(\"id\"); var T = D[W]; var V = T.cookieFlag ? \"downloadAppPlugIn_downCloseDate_\" + T.cookieFlag: \"downloadAppPlugIn_downCloseDate\"; if (!T.noRecord) &#123; setCookie(V, Date.now() + \"_259200000\", 1, \"/\", \".chunbo.com\"); &#125; document.querySelector(\"#\" + T.closePanelId).style.display = \"none\"; if (T.closeCallblack) &#123; var U = T.closeCallblackSource ? T.closeCallblackSource: null; T.closeCallblack.call(U) &#125; &#125;) &#125; &#125; function E(N) &#123; var config = merageConfig(N); bindOpenBtnClick(config); bindCloseBtnClick (config) &#125; J.downloadAppPlugIn = E;&#125;)();","tags":[]},{"title":"TODO-1：数组去重方法大全","date":"2016-09-01T05:10:00.000Z","path":"2016/09/01/TODO-1：数组去重方法大全/","text":"前两天看到有一个人在总结面试的时候写到问到了数组去重，说是方法很多。一时手痒把我能想到的都写出来了。 1、最传统的方法，“链式”检索，这个方法虽说是双层for循环嵌套，但是能够保留数组原有的顺序，对于有顺序要求的可以用这个，而且可以兼容低版本浏览器。 123456789101112131415161718let ary = [2,324,35,2,36,1,2,5,3,51,31,2,5,2,24,5,46,789,0,'2','2'];function uniq (ary)&#123; let l = ary.length, isRepeat = false, res = []; res[0] = ary[0]; for(let i = 1; i &lt; l; ++i)&#123; isRepeat = false; for(let j = 0; j &lt; res.length; ++j)&#123; if(res[j] === ary[i]) &#123;isRepeat =true; break;&#125; &#125; !isRepeat &amp;&amp; res.push(ary[i]) &#125; return res;&#125; 2、利用对象的属性不能重复的特性，但是对象的属性不能保留定义的时候的顺序，所以这个方法会破坏原有数组的顺序。 tips:为了防止太多重复，之后的代码都只写关键部分，同时用了箭头函数。 123456let obj = &#123;&#125;;ary.forEach(e=&gt;&#123; if(obj[e] !== e) &#123;res.push(e);obj[e] = e;&#125; return true;&#125;) 3、在数组中检索，能够被检索到便认为是重复，思路感觉跟第一个方法略有些相似1234res.push(ary[0]);ary.forEach(e=&gt;&#123; if(res.indexOf(e) == -1) &#123;res.push(e)&#125;&#125;) 4、先将数组排序，将相邻相同的值去掉，但是这个只适用于数据类型一致的数组。当然也破坏了原有的数组，如果想要不破坏数据源，可以先拷贝一份。123ary.sort().forEach((e, i, array)=&gt;&#123; if(e !== array[i-1]) res.push(e);&#125;) 5、利用数据的筛选和some等方法，主要思路同方法一，但是这个方法的效率应该是不如方法一的，毕竟每次都要拷贝一个新的数组。 1ary.filter((e, i, array)=&gt;!array.slice(i+1).some(ele=&gt;ele === e)); 如果想要保证原有的顺序，可以先倒序数组。 1ary.reverse().filter((e, i, array)=&gt;!array.slice(i+1).some(ele=&gt;ele === e)).reverse(); 6、最后一个是ES6提供的新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 1res = [ ...new Set(ary)]; 哈哈，是不是看起来炒鸡棒！","tags":[]},{"title":"fadora 23 dnf 更新错误","date":"2016-07-22T00:29:00.000Z","path":"2016/07/22/fadora 23 dnf 更新错误/","text":"问题：执行sudo dnf update报错： 123上次元数据过期检查：0:27:28 前，执行于 Fri Jul 22 07:42:36 2016。 依赖关系解决。 错误：该操作将导致移除已启动的内核：kernel-core-4.5.7-202.fc23.x86_64 。 解决方法： sudo dnf remove python3-dnf-plugins-core -y 参考： https://bugzilla.redhat.com/show_bug.cgi?id=1348766","tags":[]},{"title":"【codewarns-8kyu】-  Arguments to Binary addition","date":"2016-07-13T08:17:00.000Z","path":"2016/07/13/【codewarns-8kyu】-  Arguments to Binary addition/","text":"Introduction: Given an array add all the number elements and return the binary equivalent of that sum; to make the code bullet proof anything else than a number should be addeded as 0 since it can’t be addeded. If your language can handle float binaries assume the array won’t contain float or doubles. arr2bin([1,2]) == &#39;11&#39;arr2bin([1,2,&#39;a&#39;]) == &#39;11&#39;arr2bin([]) == &#39;0&#39; NOTE: NaN is a number too in javascript Knowledge: Array.prototype.filter The filter()method creates a new array width all elements that pass the test implemented by the provided function. arr.filter(callback[, thisArg]) this is the link about the filter Array.prototype.reduce The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value. arr.reduce(callback,[initialValue]) this is the link ahout the reduce Number.prototype.toString The toString() method returns a string representing the specified Number object. numObj.toString([radix]) this is the link about Number.toString","tags":[]},{"title":"react with JSX for {if…else…}","date":"2016-05-30T07:13:00.000Z","path":"2016/05/30/react with JSX for {if…else…}/","text":"在react中用jsx渲染dom的时候经常会遇到if条件判断，然而在jsx中竟是不允许if条件判断的。以下有几种判断方式，可以根据自己的应用场景，挑选适合的。 方案一： 1234567891011121314151617181920212223class HelloMessage extends React.Component &#123; render ()&#123; let userMessage; if (this.props.loggedIn) &#123; userMessage = ( &lt;span&gt; &lt;h2&gt;&#123; `Welcome Back $&#123; this.props.name &#125;` &#125;&lt;/h2&gt; &lt;p&gt;You can visit settings to reset your password&lt;/p&gt; &lt;/span&gt; ) &#125; else &#123; userMessage = ( &lt;h2&gt;Hey man! Sign in to see this section&lt;/h2&gt; ) &#125; return( &lt;div&gt; &lt;h1&gt;My Super React App&lt;/h1&gt; &#123; userMessage &#125; &lt;/div&gt; ) &#125;&#125; 方案二： 1234567891011121314151617181920212223242526class HelloMessage extends React.Component &#123; renderUserMessage()&#123; if (this.props.loggedIn) &#123; return ( &lt;span&gt; &lt;h2&gt;&#123; `Welcome Back $&#123; this.props.name &#125;` &#125;&lt;/h2&gt; &lt;p&gt;You can visit settings to reset your password&lt;/p&gt; &lt;/span&gt; ); &#125; else &#123; return ( &lt;h2&gt;Hey man! Log in to see this section&lt;/h2&gt; ); &#125; &#125; render ()&#123; return( &lt;div&gt; &lt;h1&gt;My Super React App&lt;/h1&gt; &#123; this.renderUserMessage() &#125; &lt;/div&gt; ) &#125;&#125; 方案三： 12345678910class HelloMessage extends React.Component &#123; render ()&#123; return( &lt;div&gt; &lt;h1&gt; &#123; this.props.loggedIn ? 'You are logged In' : 'You are not logged In' &#125; &lt;/h1&gt; &lt;/div&gt; ) &#125; 方案四： 1234567891011121314151617class HelloMessage extends React.Component &#123; render ()&#123; return( &lt;div&gt; &lt;h1&gt;My Super React App&lt;/h1&gt; &#123; this.props.loggedIn ? &lt;span&gt; &lt;h2&gt;&#123; `Welcome Back $&#123; this.props.name &#125;` &#125;&lt;/h2&gt; &lt;p&gt;You can visit settings to reset your password&lt;/p&gt; &lt;/span&gt; : &lt;h2&gt;Hey man! Log in to see this section&lt;/h2&gt; &#125; &lt;/div&gt; ) &#125;&#125; 方案五： 123456789101112131415161718192021// 拆分成小函数class HelloMessage extends React.Component &#123; renderLogin() &#123; // 如果这里有多行，推荐用这种方法 const &#123;loggedIn, name&#125; = this.props; if (!loggedIn) return; return (&lt;span&gt; &lt;h2&gt;Welcome Back &#123;name&#125;&lt;/h2&gt; &lt;p&gt;You can visit settings to reset your password&lt;/p&gt; &lt;/span&gt;); &#125; render ()&#123; return( &lt;div&gt; &lt;h1&gt;My Super React App&lt;/h1&gt; &#123;this.renderLogin()&#125; &lt;/div&gt; ); &#125;&#125; 综上：短小的字段判断只能用三元表达式，如果是大块的元素都需要区分，就要利用变量了。","tags":[]},{"title":"手机端网页监测是否打开键盘","date":"2016-05-03T09:15:00.000Z","path":"2016/05/03/手机端网页监测是否打开键盘/","text":"做H5页面经常会遇到页面有输入功能的例如这种的： ps：测试机仅有一台mi4c最开始想，键盘弹出应该占用了浏览器的窗口，所以弹出键盘时页面的可用高度一定是变化的，换句话说就是弹出键盘导致浏览器的高度被压缩。所以通过对比输入框获取焦点前后浏览器窗口高度的变化，可以判断出键盘是否弹出。 123document.documentElement.clientHeight // ==&gt;640document.body.clientHeight // ==&gt;640window.innerHeight // ==&gt;640 以上都可以用于检测窗口变化。如图： 第一行数据为系统原生浏览器数据，第二行为微信内置浏览器数据。 ps：但是这个方法依赖于系统对于键盘弹出的处理，有些手机系统（乐视手机，小米2A等）貌似键盘弹出的时候只是单纯的遮罩一层，并没有影响到浏览器的窗口，所以这个方法有局限性。同时以上三个方法，在Android中的实现和IOS还有一些差异。 当然对于这种设计需求在一开始就要杜绝，尽量将输入框的位置放在上半部分，如果页面是长页面对于输入框的位置就没有特别的要求了。","tags":[]},{"title":"fedora 22 安装 elixir","date":"2016-03-15T11:30:00.000Z","path":"2016/03/15/fedora 22 安装 elixir/","text":"安装配置kerl1.1 安装kerl 123456curl -O https://raw.githubusercontent.com/yrashk/kerl/master/kerlchmod a+x kerlsudo mv kerl /usr/local/bincurl -O https://github.com/yrashk/kerl/raw/master/bash_completion/kerlsudo mv kerl /etc/bash_completion.d/ 1.2 安装编译依赖 1sudo dnf install -y gcc ncurses-devel openssl-devel 1.3 创建 .kerl 配置文件 1echo 'export KERL_CONFIGURE_OPTIONS=\"--with-ssl=/usr --enable-smp-support --enable-threads --enable-kernel-poll --enable-sctp --without-javac\"' &gt;&gt; .kerlrc 使用 kerl 安装 Erlang2.1 列出可选release版本 1kerl list releases Getting the available releases from erlang.org…R10B-0 R10B-10 R10B-1a R10B-2 R10B-3 R10B-4 R10B-5 R10B-6 R10B-7 R10B-8 R10B-9 R11B-0 R11B-1 R11B-2 R11B-3 R11B-4 R11B-5 R12B-0 R12B-1 R12B-2 R12B-3 R12B-4 R12B-5 R13A R13B01 R13B02-1 R13B02 R13B03 R13B04 R13B R14A R14B01 R14B02 R14B03 R14B04 R14B_erts-5.8.1.1 R14B R15B01 R15B02 R15B02_with_MSVCR100_installer_fix R15B03-1 R15B03 R15B R16A_RELEASE_CANDIDATE R16B01 R16B02 R16B03-1 R16B03 R16B 17.0-rc1 17.0-rc2 17.0 17.1 17.3 17.4 17.5 18.0 18.1 18.2.1 18.2Run “/usr/local/bin/kerl update releases” to update this list from erlang.org 2.2 构建 &amp; 安装 12kerl build 18.2.1 vanilla_erlangkerl install vanilla_erlang ~/.kerl/installations/vanilla_erlang/ 2.3 激活 12345678# 查看安装列表kerl list installations# 激活source ~/.kerl/installations/vanilla_erlang/activate# 验证erl --version 安装kiex 12345curl -sSL https://raw.githubusercontent.com/taylor/kiex/master/install | bash -secho 'test -s \"$HOME/.kiex/scripts/kiex\" &amp;&amp; source \"$HOME/.kiex/scripts/kiex\"' &gt;&gt; ~/.bashrcsource ~/.bashrc 使用 kiex 安装 elixir 1234kiex install stablekiex use &lt;version&gt;# 验证iex --version 参考： Installing Erlang using kerl","tags":[]},{"title":"mongodb 基于地理位置的查询","date":"2016-01-08T07:33:00.000Z","path":"2016/01/08/mongodb 基于地理位置的查询/","text":"####需求：查询结果按照到某一点的距离排序。 ####schema定义：123456var UserSchema = new Schema(&#123; ... location:[Number] //经纬度数组&#125;);&lt;!--more--&gt;UserSchema.index(&#123;'location': '2dsphere'&#125;); ####查询语句12345678910User.find(&#123; location: &#123; $nearSphere: &#123; $geometry: &#123; type : \"Point\", coordinates : [116.411190, 40.005540] &#125; &#125; &#125;&#125;); 查询出来的结果是 user 表 location 距离坐标[116.411190, 40.005540]由近到远排序的，不能同时使用其他排序字段。 ######参考：http://stackoverflow.com/questions/24297556/mongoose-aggregation-with-geonearhttps://docs.mongodb.org/manual/reference/operator/query/nearSphere/http://tech.meituan.com/lucene-distance.html","tags":[]},{"title":"CentOS 6.4 上安装 Python 2.7.x","date":"2015-11-30T04:37:00.000Z","path":"2015/11/30/CentOS 6.4 上安装 Python 2.7.x/","text":"去官网下载解压相应版本的源码包，我用的这个：https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz 安装编译需要的工具：1sudo yum groupinstall -y development 编译安装：123./configuremakesudo make altinstall 使用 altinstall 而不是 install 可以防止覆盖系统自带的 python 参考：https://www.digitalocean.com/community/tutorials/how-to-set-up-python-2-7-6-and-3-3-3-on-centos-6-4","tags":[]},{"title":"学习Angular2-typescript编译","date":"2015-11-13T08:59:00.000Z","path":"2015/11/13/学习Angular2-typescript编译/","text":"前端这个方向，对于新事物的接受能力和速度决定了你在整个行业的位置。 ng2还没有发布官方稳定版本，但是我觉得对于我来说这个时候是最好的蓄力时机，于是开始了ng2的学习之路。 接触ng2之前也接触过一个avalon的东西，但是不知道是不是哪里相克，就是不顺利，后来想想，都是大同小异，不如学学更具参考性的ng2. ng2支持typescript和es5，6开发，当然官方文档目前只有ts的，为了更快的上手，不得不先用ts写，于是就有一个问题就是：编译。 构建工具是gulp，于是开始找gulp上编译ts的插件，到是有一些，本以为不会走什么岔路，偏偏这种地方被缠了段时间。看样子我是真的需要多磨练磨练啊。进入正题： 最终选用的ts编译插件：gulp-typescript 。 官方说明很详细，不多赘述，主要几个细节： 定义模块加载机制1\"module\": \"commonjs\" gulp是node下的构建工具，所以模块加载机制也采用node的机制，否则会提示如下的错误 123error TS1148: Cannot compile modules unless the '--module' flag is provided. error TS2307: Cannot find module 'angular2/angular2'. error TS2307: Cannot find module 'angular2/http'. 定义编译目标类型 1\"target\": \"es5\" 把ts转换成es5标准的文件，node提示可以更高版本，但是实际操作实验并不可行。 避免警告 1\"experimentalDecorators\": true 此项不配置，会提示警告，导致编译不成功 1error TS1219: Experimental support for decorators is a feature that is subject to change in a future release. Specify '--experimentalDecorators' to remove this warning.","tags":[]},{"title":"fedora 21 安装搜狗输入法","date":"2015-06-24T03:07:00.000Z","path":"2015/06/24/fedora 21 安装搜狗输入法/","text":"1.添加fedora中文社区软件源 1sudo wget http://repo.fdzh.org/FZUG/FZUG.repo -P /etc/yum.repos.d/ 2.安装搜狗输入法1sudo yum install -y sogoupinyin 3.卸载ibus (可选）[html] view plain copysudo yum autoremove ibus -y 4.关闭 gnome-shell 对键盘的监听1gsettings set org.gnome.settings-daemon.plugins.keyboard active false 5.切换输入法为 fcitx1imsettings-switch fcitx 6.配置 xinputrc 链接到 fcitx.con1sudo alternatives --config xinputrc 7.设置搜狗输入法开机启动 创建文本文件 【～/.config/autostart/fcitx-ui-sogou-qimpanel.desktop】 输入以下内容并保存： 123456789101112131415161718192021[Desktop Entry] Name=Sogou Pinyin Name[zh_CN]=搜狗拼音 GenericName=Sogou Pinyin Input Method GenericName[zh_CN]=搜狗拼音输入法 Comment=a popular pinyin input method Comment[zh_CN]=20 年稳定专业的输入法 MimeType=application/x-sogouskin;application/x-scel; Keywords=ime;imf;input; Exec=sogou-qimpanel %U Icon=fcitx-sogoupinyin Terminal=false Type=Application Categories=System;Utility; StartupNotify=false X-GNOME-Autostart-Phase=Applications X-GNOME-Autostart-Notify=false X-GNOME-Autostart-Delay=2 X-GNOME-AutoRestart=true X-KDE-autostart-phase=1 X-KDE-autostart-after=panel 或者使用图形界面工具gnome-tweak-tool来添加开机启动项。注：如果忽略第5、7步，系统开机时会报错： 12unable to keep input method runningGiving up to bring the process up because main input method process for FCITX rapidly died many times.See $XDG_CACHE_HOME/imsettings/log for more details. 8.reboot 参考： http://www.8dlive.com/post/199.htmlhttps://www.netroby.com/view.php?id=3681http://repo.fdzh.org/http://www.cnblogs.com/pengdonglin137/p/3462492.htmlhttps://github.com/FZUG/repo/wiki/Sogou-Pinyin-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98","tags":[]},{"title":"gnome 3 的几个桌面扩展","date":"2015-05-17T12:51:00.000Z","path":"2015/05/17/gnome 3 的几个桌面扩展/","text":"周末找了几个gnome 3 下简单好用的插件： taskbar drop-down-terminal netspeed settingscenter todo-list 需要用火狐打开安装。","tags":[]},{"title":"fedora下yum重新安装npm失败及解决","date":"2015-04-28T10:05:00.000Z","path":"2015/04/28/fedora下yum重新安装npm失败及解决/","text":"把npm卸载了，重新安装的时候报错： 12345678910111213141516171819202122232425Error unpacking rpm package npm-1.3.6-6.fc21.noarcherror: unpacking of archive failed on file /usr/lib/node_modules/npm/doc: cpio: rename..................................失败: npm.noarch 0:1.3.6-6.fc21 ``` &lt;!--more--&gt;运行npm命令报错：``` bashmodule.js:340 throw err; ^Error: Cannot find module '../lib/npm.js' at Function.Module._resolveFilename (module.js:338:15) at Function.Module._load (module.js:280:25) at Module.require (module.js:364:17) at require (module.js:380:17) at /usr/lib/node_modules/npm/bin/npm-cli.js:24:11 at Object.&lt;anonymous&gt; (/usr/lib/node_modules/npm/bin/npm-cli.js:86:3) at Module._compile (module.js:456:26) at Object.Module._extensions..js (module.js:474:10) at Module.load (module.js:356:32) at Function.Module._load (module.js:312:12) 根据错误提示查看/usr/lib/node_modules/npm/目录：错误提示图片发现用yum卸载的时候并没有删除这个目录，手动删除： 1sudo rm -r -f /usr/lib/node_modules/npm/ 再安装npm就没问题了。 造成yum卸载不完全的原因应该是之前使用 1sudo npm update -g npm 命令升级npm造成了冲突。","tags":[]},{"title":"fedora wifi频繁断开","date":"2015-04-20T09:25:00.000Z","path":"2015/04/20/fedora wifi频繁断开/","text":"在家时没有问题，到公司时 wifi 总是掉线，显示一个问号，需要手动断开重联。 这可能与公司网络太差有关，在网上查了下资料，发现修改下网络参数可以改善这种情况： 1sudo vi /etc/ppp/pppoe-server-options 将lcp-echo-interval 参数改大一些，如： 1lcp-echo-interval 100 需要重启网络服务。 参考： http://louisnetwork.blog.sohu.com/164172203.htmlhttp://bbs.chinaunix.net/thread-1553531-1-1.htmlhttp://hefeng1987-net-163-com.iteye.com/blog/967956","tags":[]},{"title":"解决fedora下webstorm中文字符不显示的问题","date":"2015-04-19T06:21:00.000Z","path":"2015/04/19/解决fedora下webstorm中文字符不显示的问题/","text":"最近新换了系统(fedra 21)，顺便把webstorm 9换成了10.发现对中文的支持出了问题：打开文件时目录中的一些汉字会变成‘口’，编辑器中的一些中文字符直接不显示。 通过查阅一些资料发现是字体的原因，解决办法就是安装【文泉驿等宽正黑】字体： 1sudo yum install -y wqy-zenhei-fonts 参考： http://bigc.at/intellij-idea-font-famliy.orzhttp://zh.wikipedia.org/wiki/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93","tags":[]}]